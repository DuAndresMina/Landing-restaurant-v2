---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="FastBite - Tu restaurante de comida rÃ¡pida favorito" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/Landing-restaurant-v2/logo.svg" />
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
		<link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet">
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<div class="gradient-bg">
			<svg viewBox="0 0 100vw 100vw" xmlns="http://www.w3.org/2000/svg" class="noiseBg">
				<filter id="noiseFilterBg">
					<feTurbulence type="fractalNoise" baseFrequency="0.6" stitchTiles="stitch" />
				</filter>
				<rect width="100%" height="100%" filter="url(#noiseFilterBg)" />
			</svg>
			<svg xmlns="http://www.w3.org/2000/svg" class="svgBlur">
				<defs>
					<filter id="goo">
						<feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
						<feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8" result="goo" />
						<feBlend in="SourceGraphic" in2="goo" />
					</filter>
				</defs>
			</svg>
			<div class="gradients-container">
				<div class="g1"></div>
				<div class="g2"></div>
				<div class="g3"></div>
				<div class="g4"></div>
				<div class="g5"></div>
				<div class="interactive"></div>
			</div>
		</div>
		<slot />
	</body>
</html>

<style is:global>
	:root {
		--color-bg1: rgb(8, 10, 15);
		--color-bg2: rgb(0, 17, 32);
		--color1: 18, 113, 255;
		--color2: 107, 74, 255;
		--color3: 100, 100, 255;
		--color4: 50, 160, 220;
		--color5: 80, 47, 122;
		--color-interactive: 140, 100, 255;
		--circle-size: 80%;
		--blending: hard-light;
	}

	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}

	html {
		font-family: 'Montserrat', sans-serif;
		height: 100%;
		scroll-behavior: smooth;
	}

	body {
		min-height: 100vh;
		position: relative;
		overflow-x: hidden;
		background: linear-gradient(40deg, var(--color-bg1), var(--color-bg2));
	}

	.gradient-bg {
		width: 100vw;
		height: 100vh;
		position: fixed;
		top: 0;
		left: 0;
		z-index: -1;
		overflow: hidden;
	}

	.noiseBg {
		position: absolute;
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		z-index: 1;
		mix-blend-mode: soft-light;
		opacity: 0.3;
	}

	.gradients-container {
		filter: url(#goo) blur(40px);
		width: 100%;
		height: 100%;
	}

	.g1, .g2, .g3, .g4, .g5 {
		position: absolute;
		width: var(--circle-size);
		height: var(--circle-size);
		mix-blend-mode: var(--blending);
		opacity: 0.8;
	}

	.g1 {
		background: radial-gradient(circle at center, rgba(var(--color1), 0.8) 0, rgba(var(--color1), 0) 50%) no-repeat;
		animation: moveVertical 30s ease infinite;
	}

	.g2 {
		background: radial-gradient(circle at center, rgba(var(--color2), 0.8) 0, rgba(var(--color2), 0) 50%) no-repeat;
		animation: moveInCircle 20s reverse infinite;
	}

	.g3 {
		background: radial-gradient(circle at center, rgba(var(--color3), 0.8) 0, rgba(var(--color3), 0) 50%) no-repeat;
		animation: moveInCircle 40s linear infinite;
	}

	.g4 {
		background: radial-gradient(circle at center, rgba(var(--color4), 0.8) 0, rgba(var(--color4), 0) 50%) no-repeat;
		animation: moveHorizontal 40s ease infinite;
	}

	.g5 {
		background: radial-gradient(circle at center, rgba(var(--color5), 0.8) 0, rgba(var(--color5), 0) 50%) no-repeat;
		animation: moveInCircle 20s ease infinite;
	}

	.interactive {
		position: absolute;
		background: radial-gradient(circle at center, rgba(var(--color-interactive), 0.8) 0, rgba(var(--color-interactive), 0) 50%) no-repeat;
		mix-blend-mode: var(--blending);
		width: 100%;
		height: 100%;
		top: -50%;
		left: -50%;
		opacity: 0.7;
	}

	@keyframes moveInCircle {
		0% { transform: rotate(0deg); }
		50% { transform: rotate(180deg); }
		100% { transform: rotate(360deg); }
	}

	@keyframes moveVertical {
		0% { transform: translateY(-50%); }
		50% { transform: translateY(50%); }
		100% { transform: translateY(-50%); }
	}

	@keyframes moveHorizontal {
		0% { transform: translateX(-50%) translateY(-10%); }
		50% { transform: translateX(50%) translateY(10%); }
		100% { transform: translateX(-50%) translateY(-10%); }
	}

	/* Glassmorphism base styles */
	.glass {
		background: rgba(255, 255, 255, 0.05);
		backdrop-filter: blur(10px);
		border-radius: 1rem;
		border: 1px solid rgba(255, 255, 255, 0.1);
	}

	main {
		position: relative;
		z-index: 1;
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const interBubble = document.querySelector('.interactive');
		let curX = 0;
		let curY = 0;
		let tgX = 0;
		let tgY = 0;

		const move = () => {
			curX += (tgX - curX) / 20;
			curY += (tgY - curY) / 20;
			if (interBubble) {
				interBubble.style.transform = `translate(${Math.round(curX)}px, ${Math.round(curY)}px)`;
			}
			requestAnimationFrame(move);
		};

		window.addEventListener('mousemove', (event) => {
			tgX = event.clientX;
			tgY = event.clientY;
		});

		move();
	});
</script>